---
title: Osa 7
exercise_page: false
quiz_page: false
published: true
---


<% partial 'partials/hint', locals: { name: 'Osan 7 etapit' } do %>

  <ul>
    <li>Viimeiset viilaukset</li>
    <li>Loppupalautus</li>
    <li>Demo</li>
  </ul>

<% end %>


<p>
  Tee viimeiset viilaukset sovellukseesi sekä sen dokumentaatioon. Tarkasta, että dokumentaatiossa olevat käyttötapaukset vastaavat sovelluksen toiminnallisuutta ja kaaviot tietokantaa. Varmista, että sovellus on käytettävä, ja katso että se on sellaisessa kunnossa, että sen voi ottaa käyttöön ja sitä voi demota muille.
</p>

<% partial 'partials/material_heading' do %>
  Demo
<% end %>

<p>
  Kurssin loppupuolella, ennen viimeistä palautusta, pidetään demotilaisuus jossa jokainen pääsee esittelemään omaa työtään. Työn ei tarvitse olla siis vielä valmis, vaan demossa esitellään työtä sellaisenaan. Myös tiedossa olevan virheen esittely on hyvää demottamista, keskeneräistä tai hieman rikkinäistä sovellusta ei kannata pelätä esitellä.
</p>

<p>
  Demossa työtä esitellään ensisijaisesti muille kurssilaisille, yleensä pienryhmissä. Tarkoitus on esitellä toimintoja ja työn tarkoitusta. Koodiin ei tarvitse keskittyä, mutta sitäkin voi tarkastella, erityisesti jos haluaa vinkkiä muilta opiskelijoilta. Demolla onkin hyvä kerätä vertaispalautetta ennen lopullista palautusta.
</p>

<p>
  Demotilaisuudessa siis kerätään ja annetaan palautetta toisten opiskelijoiden sovelluksesta. Kuten muissakin vertaispalautteissa, annettaan rakentavaa palautetta ja kannustetaan kanssaopiskelijoita. Tällä tavalla jokainen saa itselleenkin hyödyllistä palautetta. Demon aikana saa (ja pitää) kysyä kysymyksiä. Jos esimerkiksi jokin ominaisuus tai toteutus jää askarruttamaan, kannattaa siitä kysyä.
</p>


<% partial 'partials/material_heading' do %>
  Kurssin arvostelu
<% end %>

<p>
  Loppupalautusta varten kannattaa tarkastella kurssin arvosteluperusteita. Työ arvostellaan useamman osan summana:
</p>

<ul>
  <li>Dokumentaatio, tietokantarakenteen toimivuus valittuun ongelmaan (18p)</li> 
    <ul>
      <li>Dokumetaatiosta olikin tarkemmin jo edellisessä osassa.</li>
      <li>Lisäksi tarkastellaan tietokannan soveltuvuutta ja toimivuutta sekä tietokantajärjestelmiä (esim. SQLite paikallisesti, PSQL tuotantosovelluksessa).</li>
    </ul>
  <li>Tietokannan toteutus ja tietokantaa käyttävän sovelluksen tietokantaa käyttävän osan rakenne, ml. tietoturva (12p)</li> 
    <ul>
      <li>Tietokanta on toteutettu tietoturvallisesti (tietosyötteiden validointi palvelimella, ei SQL-injektioita)</li> 
      <li>Tietokantakyselyiden tehokkuus</li>
      <li>Monimutkaisempien yhteenvetokyselyiden olemassaolo ja toteutus.</li>
    </ul>
  <li>Web-sovelluksen tietokantaan kuulumaton puoli (5p)</li>
    <ul>
      <li>Sovellus toimii päällisin puolin</li>
      <li>Syötteet on validoitu</li>
      <li>Sovellus on yhtenäinen ja siisti.</li>
    </ul>
  <li>Käytettävyys (6p)</li>
    <ul>
      <li>Sovellus on loogisesti käytettävä ja selkeä</li> 
      <li>Käyttäjän virheistä annetaan selkeitä ohjeita/virheilmoituksia.</li>
    </ul>
  <li>Koodin ja sovelluksen ylläpidettävyys (5p)</li>
    <ul>
      <li>Konfiguroitavissa sekä paikallisesti että tuotantoympäristöön</li> 
      <li>Koodi ei sisällä salasanoja tai poiskommentoitua koodia</li> 
      <li>Koodi on selkeää ja tarvittaessa kommentoitua.</li>
    </ul>
  <li>Aikataulussa pysyminen, osapalautukset, demo ja koodikatselmoinnit (14p)</li>
    <ul>
      <li>Osien deadlineista maksimissaan 8p</li>
      <li>Demosta 2p</li> 
      <li>Koodikatselmoinneista maksimissaan 4p.</li>
    </ul>
</ul>

<p> 
  Vielä tarkemmin perusteita löytyy <%= link_to 'johdannosta', 'index.html'%>, josta löytyy myös esimerkiksi arvosanan 5 tarkemmat vaatimukset sekä arvosanarajat.
</p>
